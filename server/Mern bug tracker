// ============================================
// üìÅ MERN Bug Tracker - Server Side (Express)
// ============================================

// File: server/app.js
const express = require('express');
const mongoose = require('mongoose');
const cors = require('cors');
const dotenv = require('dotenv');
const bugRoutes = require('./routes/bugRoutes');
const errorHandler = require('./middlewares/errorHandler');

dotenv.config();
const app = express();
app.use(cors());
app.use(express.json());

app.use('/api/bugs', bugRoutes);
app.use(errorHandler);

module.exports = app;

// File: server/server.js
const app = require('./app');
const mongoose = require('mongoose');

mongoose.connect(process.env.MONGO_URI, {
  useNewUrlParser: true,
  useUnifiedTopology: true,
}).then(() => {
  console.log('MongoDB connected');
  app.listen(process.env.PORT, () => {
    console.log(`Server running on port ${process.env.PORT}`);
  });
}).catch((err) => console.error(err));

// File: server/models/Bug.js
const mongoose = require('mongoose');

const bugSchema = new mongoose.Schema({
  title: { type: String, required: true },
  description: { type: String, required: true },
  status: {
    type: String,
    enum: ['open', 'in-progress', 'resolved'],
    default: 'open'
  },
}, { timestamps: true });

module.exports = mongoose.model('Bug', bugSchema);

// File: server/controllers/bugController.js
const Bug = require('../models/Bug');

exports.getBugs = async (req, res) => {
  const bugs = await Bug.find();
  res.json(bugs);
};

exports.createBug = async (req, res) => {
  const bug = new Bug(req.body);
  await bug.save();
  res.status(201).json(bug);
};

exports.updateBug = async (req, res) => {
  const bug = await Bug.findByIdAndUpdate(req.params.id, req.body, { new: true });
  res.json(bug);
};

exports.deleteBug = async (req, res) => {
  await Bug.findByIdAndDelete(req.params.id);
  res.status(204).end();
};

// File: server/routes/bugRoutes.js
const express = require('express');
const router = express.Router();
const controller = require('../controllers/bugController');

router.get('/', controller.getBugs);
router.post('/', controller.createBug);
router.put('/:id', controller.updateBug);
router.delete('/:id', controller.deleteBug);

module.exports = router;

// File: server/middlewares/errorHandler.js
module.exports = (err, req, res, next) => {
  res.status(err.status || 500).json({ message: err.message || 'Server error' });
};

// File: server/.env.example
MONGO_URI=your_mongodb_connection_string
PORT=5000

// ============================================
// üìÅ MERN Bug Tracker - Client Side (React)
// ============================================

// File: client/src/App.jsx
import React from 'react';
import { BrowserRouter, Routes, Route } from 'react-router-dom';
import Home from './pages/Home';
import Navbar from './components/Navbar';

function App() {
  return (
    <BrowserRouter>
      <Navbar />
      <Routes>
        <Route path="/" element={<Home />} />
      </Routes>
    </BrowserRouter>
  );
}

export default App;

// File: client/src/pages/Home.jsx
import React, { useEffect, useState } from 'react';
import axios from 'axios';
import BugForm from '../components/BugForm';
import BugItem from '../components/BugItem';

const Home = () => {
  const [bugs, setBugs] = useState([]);

  const fetchBugs = async () => {
    const res = await axios.get('/api/bugs');
    setBugs(res.data);
  };

  useEffect(() => {
    fetchBugs();
  }, []);

  return (
    <div>
      <h2>Bug Tracker</h2>
      <BugForm onBugAdded={fetchBugs} />
      {bugs.map(bug => <BugItem key={bug._id} bug={bug} onUpdate={fetchBugs} />)}
    </div>
  );
};

export default Home;

// File: client/src/components/Navbar.jsx
import React from 'react';

const Navbar = () => <nav><h1>üêõ Bug Tracker</h1></nav>;

export default Navbar;

// File: client/src/components/BugForm.jsx
import React, { useState } from 'react';
import axios from 'axios';

const BugForm = ({ onBugAdded }) => {
  const [form, setForm] = useState({ title: '', description: '' });

  const handleSubmit = async (e) => {
    e.preventDefault();
    await axios.post('/api/bugs', form);
    setForm({ title: '', description: '' });
    onBugAdded();
  };

  return (
    <form onSubmit={handleSubmit}>
      <input placeholder="Title" value={form.title} onChange={(e) => setForm({ ...form, title: e.target.value })} />
      <input placeholder="Description" value={form.description} onChange={(e) => setForm({ ...form, description: e.target.value })} />
      <button type="submit">Report Bug</button>
    </form>
  );
};

export default BugForm;

// File: client/src/components/BugItem.jsx
import React from 'react';
import axios from 'axios';

const BugItem = ({ bug, onUpdate }) => {
  const updateStatus = async () => {
    const nextStatus = bug.status === 'open' ? 'in-progress' : bug.status === 'in-progress' ? 'resolved' : 'open';
    await axios.put(`/api/bugs/${bug._id}`, { status: nextStatus });
    onUpdate();
  };

  const deleteBug = async () => {
    await axios.delete(`/api/bugs/${bug._id}`);
    onUpdate();
  };

  return (
    <div>
      <h3>{bug.title}</h3>
      <p>{bug.description}</p>
      <p>Status: {bug.status}</p>
      <button onClick={updateStatus}>Next Status</button>
      <button onClick={deleteBug}>Delete</button>
    </div>
  );
};

export default BugItem;

// File: client/.env.example
VITE_API_BASE_URL=http://localhost:5000

// File: client/vite.config.js
import { defineConfig } from 'vite';
import react from '@vitejs/plugin-react';

export default defineConfig({
  plugins: [react()],
  server: {
    proxy: {
      '/api': 'http://localhost:5000',
    },
  },
});
